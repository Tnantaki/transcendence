input {
  # stdin {} # for debug

  tcp {
    port => 5044
    codec => json
  }

  jdbc {
    jdbc_connection_string => "jdbc:postgresql://db:5432/${DJ_DB_NAME}"
    jdbc_user => "${DJ_DB_USER}"
    jdbc_password => "${DJ_DB_PASS}"
    jdbc_driver_library => "/usr/share/logstash/postgresql-42.2.29.jre7.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    schedule => "*/10 * * * * *"  # Runs every 10 sec; adjust as needed
    # statement => "SELECT * FROM myapp_person"  # SQL query in case there isn't updated column
    # statement => "SELECT * FROM myapp_person WHERE updated > :sql_last_value"
    statement => "SELECT *, updated AT TIME ZONE 'UTC' FROM auth_user WHERE updated > :sql_last_value"
    use_column_value => true
    tracking_column => "updated" # last_updated column in SQL (only log that value that updated)
    tracking_column_type => "timestamp"
    last_run_metadata_path => "/usr/share/logstash/last_run_metadata.yml" # for store timestamp of tracking
    tags => ["database"]  # Tag events from the database
  }
}

# filter {
#   # Set the index name dynamically based on the tag
#   if "backend" in [tags] {
#     mutate {
#       add_field => { "[@metadata][index]" => "backend-logs-%{+YYYY.MM.dd}" }
#     }
#   } else if "database" in [tags] {
#     mutate {
#       add_field => { "[@metadata][index]" => "database-accounts" }
#     }
#   }
# }

output {
  if "backend" in [tags] {
    elasticsearch {
      hosts => ["https://elasticsearch:9200"]
      user => "elastic"
      password => "${ELASTIC_PASSWORD}"
      ssl => true
      ssl_certificate_verification => true
      cacert => "/usr/share/logstash/config/certs/root-ca.pem"
      index => "backend-logs-%{+YYYY.MM.dd}"
      ilm_enabled => true
      ilm_policy => "logstash-ilm-policy"  # Reference to your ILM policy
      manage_template => false  # Prevents Logstash from managing the index template
    }
  }

  if "database" in [tags] {
    elasticsearch {
      hosts => ["https://elasticsearch:9200"]
      user => "elastic"
      password => "${ELASTIC_PASSWORD}"
      ssl => true
      ssl_certificate_verification => true
      cacert => "/usr/share/logstash/config/certs/root-ca.pem"
      index => "database-accounts"
      document_id => "%{id}" # replace id with SQL primary key dynamically
    }
  }

  stdout {
    codec => rubydebug {
      metadata => true
    }
  } # for debug
}